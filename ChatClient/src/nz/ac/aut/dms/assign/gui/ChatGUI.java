/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nz.ac.aut.dms.assign.gui;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import nz.ac.aut.dms.assign.model.Buffer;
import nz.ac.aut.dms.assign.model.ChatClient;
import nz.ac.aut.dms.assign.model.ChatEventListener;
import nz.ac.aut.dms.assign.model.ChatStatus;
import nz.ac.aut.dms.assign.model.ClientTCPReceiverTask;
import nz.ac.aut.dms.assign.model.ClientTCPSenderTask;
import nz.ac.aut.dms.assign.model.ClientMulticastReceiverTask;
import nz.ac.aut.dms.assign.model.HandshakeMessage;

/**
 *
 * @author Dong Huang
 */
public class ChatGUI extends javax.swing.JFrame implements ChatEventListener {

    /**
     * Creates new form ChatGUI
     *
     * @param chatClient
     * @param buffer
     */
    public ChatGUI(ChatClient chatClient, Buffer buffer) {
        this.chatClient = chatClient;
        this.buffer = buffer;
        
        usersAndChatHistory = new HashMap<>();

        initComponents();
        initializeChatWindow();

        update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelConnection = new javax.swing.JPanel();
        jTextFieldServerIP = new javax.swing.JTextField();
        jTextFieldServerPort = new javax.swing.JTextField();
        jTextFieldYourName = new javax.swing.JTextField();
        jLabelServerIP = new javax.swing.JLabel();
        jLabelServerPort = new javax.swing.JLabel();
        jLabelYourName = new javax.swing.JLabel();
        jButtonConnect = new javax.swing.JButton();
        jButtonDisconnect = new javax.swing.JButton();
        jPanelFriendList = new javax.swing.JPanel();
        jScrollPaneFriendList = new javax.swing.JScrollPane();
        jListFriendList = new javax.swing.JList<>();
        jPanelChatHistory = new javax.swing.JPanel();
        jScrollPaneChatHistory = new javax.swing.JScrollPane();
        jTextAreaChatHistory = new javax.swing.JTextArea();
        jPanelMessageInput = new javax.swing.JPanel();
        jButtonSend = new javax.swing.JButton();
        jCheckBoxBroadcast = new javax.swing.JCheckBox();
        jScrollPaneMessageInput = new javax.swing.JScrollPane();
        jTextAreaMessageInput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ChatClient");
        setResizable(false);

        jPanelConnection.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection"));

        jTextFieldServerPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldServerPortActionPerformed(evt);
            }
        });

        jLabelServerIP.setText("Server IP:");

        jLabelServerPort.setText("Server Port:");

        jLabelYourName.setText("Your Name:");

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jButtonDisconnect.setText("Disconnect");
        jButtonDisconnect.setActionCommand("");
        jButtonDisconnect.setEnabled(false);

        javax.swing.GroupLayout jPanelConnectionLayout = new javax.swing.GroupLayout(jPanelConnection);
        jPanelConnection.setLayout(jPanelConnectionLayout);
        jPanelConnectionLayout.setHorizontalGroup(
            jPanelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConnectionLayout.createSequentialGroup()
                .addGroup(jPanelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelServerIP, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelServerPort, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelYourName, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextFieldServerPort, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(jTextFieldServerIP, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldYourName))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanelConnectionLayout.createSequentialGroup()
                .addComponent(jButtonConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonDisconnect)
                .addContainerGap())
        );
        jPanelConnectionLayout.setVerticalGroup(
            jPanelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConnectionLayout.createSequentialGroup()
                .addGroup(jPanelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelServerIP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelServerPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldYourName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelYourName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConnect)
                    .addComponent(jButtonDisconnect)))
        );

        jPanelFriendList.setBorder(javax.swing.BorderFactory.createTitledBorder("Friend List"));

        jListFriendList.setModel(new AbstractListModel() {
            String[] strings = {"     "};
            @Override
            public int getSize() {
                return strings.length;
            }

            @Override
            public Object getElementAt(int index) {
                return strings[index];
            }
        });
        jListFriendList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListFriendList.setEnabled(false);
        jListFriendList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFriendListValueChanged(evt);
            }
        });
        jScrollPaneFriendList.setViewportView(jListFriendList);

        javax.swing.GroupLayout jPanelFriendListLayout = new javax.swing.GroupLayout(jPanelFriendList);
        jPanelFriendList.setLayout(jPanelFriendListLayout);
        jPanelFriendListLayout.setHorizontalGroup(
            jPanelFriendListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFriendListLayout.createSequentialGroup()
                .addComponent(jScrollPaneFriendList, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanelFriendListLayout.setVerticalGroup(
            jPanelFriendListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneFriendList, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanelChatHistory.setBorder(javax.swing.BorderFactory.createTitledBorder("Chat History"));

        jTextAreaChatHistory.setEditable(false);
        jTextAreaChatHistory.setColumns(20);
        jTextAreaChatHistory.setLineWrap(true);
        jTextAreaChatHistory.setRows(5);
        jScrollPaneChatHistory.setViewportView(jTextAreaChatHistory);

        javax.swing.GroupLayout jPanelChatHistoryLayout = new javax.swing.GroupLayout(jPanelChatHistory);
        jPanelChatHistory.setLayout(jPanelChatHistoryLayout);
        jPanelChatHistoryLayout.setHorizontalGroup(
            jPanelChatHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneChatHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
        );
        jPanelChatHistoryLayout.setVerticalGroup(
            jPanelChatHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneChatHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanelMessageInput.setBorder(javax.swing.BorderFactory.createTitledBorder("Message Input"));

        jButtonSend.setText("Send");
        jButtonSend.setEnabled(false);
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jCheckBoxBroadcast.setText("Broadcast");
        jCheckBoxBroadcast.setEnabled(false);

        jTextAreaMessageInput.setColumns(20);
        jTextAreaMessageInput.setLineWrap(true);
        jTextAreaMessageInput.setRows(5);
        jTextAreaMessageInput.setEnabled(false);
        jScrollPaneMessageInput.setViewportView(jTextAreaMessageInput);

        javax.swing.GroupLayout jPanelMessageInputLayout = new javax.swing.GroupLayout(jPanelMessageInput);
        jPanelMessageInput.setLayout(jPanelMessageInputLayout);
        jPanelMessageInputLayout.setHorizontalGroup(
            jPanelMessageInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMessageInputLayout.createSequentialGroup()
                .addComponent(jCheckBoxBroadcast)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSend))
            .addComponent(jScrollPaneMessageInput)
        );
        jPanelMessageInputLayout.setVerticalGroup(
            jPanelMessageInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMessageInputLayout.createSequentialGroup()
                .addComponent(jScrollPaneMessageInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelMessageInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSend)
                    .addComponent(jCheckBoxBroadcast)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelFriendList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChatHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelMessageInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelConnection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelFriendList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelChatHistory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelMessageInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldServerPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldServerPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldServerPortActionPerformed

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        String serverIP = getjTextFieldServerIP().getText();
        String serverPort = getjTextFieldServerPort().getText();

        Socket tcpSocket = null;

        try {
            // made a tcp connection with the server
            tcpSocket = new Socket(InetAddress.getByName(serverIP), Integer.valueOf(serverPort));
        } catch (UnknownHostException ex) {
            Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    this,
                    "Connection failed. Please try again.", "Warning",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    this,
                    "Connection failed. Please try again.", "Warning",
                    JOptionPane.INFORMATION_MESSAGE);
        }

        getjTextFieldServerIP().setEnabled(false);
        getjTextFieldServerPort().setEnabled(false);
        getjTextFieldYourName().setEnabled(false);
        getjButtonConnect().setEnabled(false);
        getjButtonDisconnect().setEnabled(true);
        getjListFriendList().setEnabled(true);
        getjTextAreaMessageInput().setEnabled(true);
        getjCheckBoxBroadcast().setEnabled(true);

        // start tcp thread for sending unicast messages to the server
        ClientTCPSenderTask clientTCPSenderTask = new ClientTCPSenderTask(tcpSocket, this);
        Thread clientTCPSenderThread = new Thread(clientTCPSenderTask);
        clientTCPSenderThread.start();

        // start tcp thread for receiving unicast messages from the server
        ClientTCPReceiverTask clientTCPReceiverTask = new ClientTCPReceiverTask(tcpSocket, this);
        Thread clientTCPReceiverThread = new Thread(clientTCPReceiverTask);
        clientTCPReceiverThread.start();

        // start udp thread for receiving broadcast messages from the server
        ClientMulticastReceiverTask clientMulticastReceiverTask = new ClientMulticastReceiverTask(this);
        Thread clientMulticastReceiverThread = new Thread(clientMulticastReceiverTask);
        clientMulticastReceiverThread.start();
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        sendButtonPressed = true;
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jListFriendListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFriendListValueChanged
        //jTextAreaChatHistory.setText(jListFriendList.getSelectedValue());
        // todo: change the content in the chat history according to the user selected.
    }//GEN-LAST:event_jListFriendListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonDisconnect;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JCheckBox jCheckBoxBroadcast;
    private javax.swing.JLabel jLabelServerIP;
    private javax.swing.JLabel jLabelServerPort;
    private javax.swing.JLabel jLabelYourName;
    private javax.swing.JList<String> jListFriendList;
    private javax.swing.JPanel jPanelChatHistory;
    private javax.swing.JPanel jPanelConnection;
    private javax.swing.JPanel jPanelFriendList;
    private javax.swing.JPanel jPanelMessageInput;
    private javax.swing.JScrollPane jScrollPaneChatHistory;
    private javax.swing.JScrollPane jScrollPaneFriendList;
    private javax.swing.JScrollPane jScrollPaneMessageInput;
    private javax.swing.JTextArea jTextAreaChatHistory;
    private javax.swing.JTextArea jTextAreaMessageInput;
    private javax.swing.JTextField jTextFieldServerIP;
    private javax.swing.JTextField jTextFieldServerPort;
    private javax.swing.JTextField jTextFieldYourName;
    // End of variables declaration//GEN-END:variables

    private ChatClient chatClient = null;
    private ChatStatus chatStatus = null;
    private HashMap<String, String> usersAndChatHistory = null;
    private Buffer buffer = null;
    private boolean sendButtonPressed = false;

    @Override
    public void chatStateChanged() {
    }

    private void initializeChatWindow() {

    }

    private void update() {
    }

    /**
     * @return the jListFriendList
     */
    public javax.swing.JList<String> getjListFriendList() {
        return jListFriendList;
    }

    /**
     * @param jListFriendList the jListFriendList to set
     */
    public void setjListFriendList(javax.swing.JList<String> jListFriendList) {
        this.jListFriendList = jListFriendList;
    }

    /**
     * @return the jButtonConnect
     */
    public javax.swing.JButton getjButtonConnect() {
        return jButtonConnect;
    }

    /**
     * @param jButtonConnect the jButtonConnect to set
     */
    public void setjButtonConnect(javax.swing.JButton jButtonConnect) {
        this.jButtonConnect = jButtonConnect;
    }

    /**
     * @return the jButtonDisconnect
     */
    public javax.swing.JButton getjButtonDisconnect() {
        return jButtonDisconnect;
    }

    /**
     * @param jButtonDisconnect the jButtonDisconnect to set
     */
    public void setjButtonDisconnect(javax.swing.JButton jButtonDisconnect) {
        this.jButtonDisconnect = jButtonDisconnect;
    }

    /**
     * @return the jButtonSend
     */
    public javax.swing.JButton getjButtonSend() {
        return jButtonSend;
    }

    /**
     * @param jButtonSend the jButtonSend to set
     */
    public void setjButtonSend(javax.swing.JButton jButtonSend) {
        this.jButtonSend = jButtonSend;
    }

    /**
     * @return the jCheckBoxBroadcast
     */
    public javax.swing.JCheckBox getjCheckBoxBroadcast() {
        return jCheckBoxBroadcast;
    }

    /**
     * @param jCheckBoxBroadcast the jCheckBoxBroadcast to set
     */
    public void setjCheckBoxBroadcast(javax.swing.JCheckBox jCheckBoxBroadcast) {
        this.jCheckBoxBroadcast = jCheckBoxBroadcast;
    }

    /**
     * @return the jLabelServerIP
     */
    public javax.swing.JLabel getjLabelServerIP() {
        return jLabelServerIP;
    }

    /**
     * @param jLabelServerIP the jLabelServerIP to set
     */
    public void setjLabelServerIP(javax.swing.JLabel jLabelServerIP) {
        this.jLabelServerIP = jLabelServerIP;
    }

    /**
     * @return the jLabelServerPort
     */
    public javax.swing.JLabel getjLabelServerPort() {
        return jLabelServerPort;
    }

    /**
     * @param jLabelServerPort the jLabelServerPort to set
     */
    public void setjLabelServerPort(javax.swing.JLabel jLabelServerPort) {
        this.jLabelServerPort = jLabelServerPort;
    }

    /**
     * @return the jLabelYourName
     */
    public javax.swing.JLabel getjLabelYourName() {
        return jLabelYourName;
    }

    /**
     * @param jLabelYourName the jLabelYourName to set
     */
    public void setjLabelYourName(javax.swing.JLabel jLabelYourName) {
        this.jLabelYourName = jLabelYourName;
    }

    /**
     * @return the jPanelChatHistory
     */
    public javax.swing.JPanel getjPanelChatHistory() {
        return jPanelChatHistory;
    }

    /**
     * @param jPanelChatHistory the jPanelChatHistory to set
     */
    public void setjPanelChatHistory(javax.swing.JPanel jPanelChatHistory) {
        this.jPanelChatHistory = jPanelChatHistory;
    }

    /**
     * @return the jPanelConnection
     */
    public javax.swing.JPanel getjPanelConnection() {
        return jPanelConnection;
    }

    /**
     * @param jPanelConnection the jPanelConnection to set
     */
    public void setjPanelConnection(javax.swing.JPanel jPanelConnection) {
        this.jPanelConnection = jPanelConnection;
    }

    /**
     * @return the jPanelFriendList
     */
    public javax.swing.JPanel getjPanelFriendList() {
        return jPanelFriendList;
    }

    /**
     * @param jPanelFriendList the jPanelFriendList to set
     */
    public void setjPanelFriendList(javax.swing.JPanel jPanelFriendList) {
        this.jPanelFriendList = jPanelFriendList;
    }

    /**
     * @return the jPanelMessageInput
     */
    public javax.swing.JPanel getjPanelMessageInput() {
        return jPanelMessageInput;
    }

    /**
     * @param jPanelMessageInput the jPanelMessageInput to set
     */
    public void setjPanelMessageInput(javax.swing.JPanel jPanelMessageInput) {
        this.jPanelMessageInput = jPanelMessageInput;
    }

    /**
     * @return the jScrollPaneChatHistory
     */
    public javax.swing.JScrollPane getjScrollPaneChatHistory() {
        return jScrollPaneChatHistory;
    }

    /**
     * @param jScrollPaneChatHistory the jScrollPaneChatHistory to set
     */
    public void setjScrollPaneChatHistory(javax.swing.JScrollPane jScrollPaneChatHistory) {
        this.jScrollPaneChatHistory = jScrollPaneChatHistory;
    }

    /**
     * @return the jScrollPaneFriendList
     */
    public javax.swing.JScrollPane getjScrollPaneFriendList() {
        return jScrollPaneFriendList;
    }

    /**
     * @param jScrollPaneFriendList the jScrollPaneFriendList to set
     */
    public void setjScrollPaneFriendList(javax.swing.JScrollPane jScrollPaneFriendList) {
        this.jScrollPaneFriendList = jScrollPaneFriendList;
    }

    /**
     * @return the jScrollPaneMessageInput
     */
    public javax.swing.JScrollPane getjScrollPaneMessageInput() {
        return jScrollPaneMessageInput;
    }

    /**
     * @param jScrollPaneMessageInput the jScrollPaneMessageInput to set
     */
    public void setjScrollPaneMessageInput(javax.swing.JScrollPane jScrollPaneMessageInput) {
        this.jScrollPaneMessageInput = jScrollPaneMessageInput;
    }

    /**
     * @return the jTextAreaChatHistory
     */
    public javax.swing.JTextArea getjTextAreaChatHistory() {
        return jTextAreaChatHistory;
    }

    /**
     * @param jTextAreaChatHistory the jTextAreaChatHistory to set
     */
    public void setjTextAreaChatHistory(javax.swing.JTextArea jTextAreaChatHistory) {
        this.jTextAreaChatHistory = jTextAreaChatHistory;
    }

    /**
     * @return the jTextAreaMessageInput
     */
    public javax.swing.JTextArea getjTextAreaMessageInput() {
        return jTextAreaMessageInput;
    }

    /**
     * @param jTextAreaMessageInput the jTextAreaMessageInput to set
     */
    public void setjTextAreaMessageInput(javax.swing.JTextArea jTextAreaMessageInput) {
        this.jTextAreaMessageInput = jTextAreaMessageInput;
    }

    /**
     * @return the jTextFieldServerIP
     */
    public javax.swing.JTextField getjTextFieldServerIP() {
        return jTextFieldServerIP;
    }

    /**
     * @param jTextFieldServerIP the jTextFieldServerIP to set
     */
    public void setjTextFieldServerIP(javax.swing.JTextField jTextFieldServerIP) {
        this.jTextFieldServerIP = jTextFieldServerIP;
    }

    /**
     * @return the jTextFieldServerPort
     */
    public javax.swing.JTextField getjTextFieldServerPort() {
        return jTextFieldServerPort;
    }

    /**
     * @param jTextFieldServerPort the jTextFieldServerPort to set
     */
    public void setjTextFieldServerPort(javax.swing.JTextField jTextFieldServerPort) {
        this.jTextFieldServerPort = jTextFieldServerPort;
    }

    /**
     * @return the jTextFieldYourName
     */
    public javax.swing.JTextField getjTextFieldYourName() {
        return jTextFieldYourName;
    }

    /**
     * @param jTextFieldYourName the jTextFieldYourName to set
     */
    public void setjTextFieldYourName(javax.swing.JTextField jTextFieldYourName) {
        this.jTextFieldYourName = jTextFieldYourName;
    }

    /**
     * @return the chatClient
     */
    public ChatClient getChatClient() {
        return chatClient;
    }

    /**
     * @param chatClient the chatClient to set
     */
    public void setChatClient(ChatClient chatClient) {
        this.chatClient = chatClient;
    }

    /**
     * @return the chatStatus
     */
    public ChatStatus getChatStatus() {
        return chatStatus;
    }

    /**
     * @param chatStatus the chatStatus to set
     */
    public void setChatStatus(ChatStatus chatStatus) {
        this.chatStatus = chatStatus;
    }

  

    /**
     * @return the buffer
     */
    public Buffer getBuffer() {
        return buffer;
    }

    /**
     * @param buffer the buffer to set
     */
    public void setBuffer(Buffer buffer) {
        this.buffer = buffer;
    }

    /**
     * @return the sendButtonPressed
     */
    public boolean isSendButtonPressed() {
        return sendButtonPressed;
    }

    /**
     * @param sendButtonPressed the sendButtonPressed to set
     */
    public void setSendButtonPressed(boolean sendButtonPressed) {
        this.sendButtonPressed = sendButtonPressed;
    }

    /**
     * @return the usersAndChatHistory
     */
    public HashMap<String, String> getUsersAndChatHistory() {
        return usersAndChatHistory;
    }

    /**
     * @param usersAndChatHistory the usersAndChatHistory to set
     */
    public void setUsersAndChatHistory(HashMap<String, String> usersAndChatHistory) {
        this.usersAndChatHistory = usersAndChatHistory;
    }

}
